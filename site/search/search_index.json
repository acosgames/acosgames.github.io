{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"(Acos) A cup of skill Play or develop your own competitive online web game. You must first become a developer in the acosgames GitHub Organization. Simply go to Developer Zone on Acos to start. Getting Started Create a new game inside the Developer Zone on Acos . A public GitHub repository will be created at https://github.com/acosgames/<game_slug> with the Slug Name you specified. You will be added as an admin to the repository. Start from an existing Game Template Choose from the available game templates below: Game Templates Tic Tac Toe Play on Acos Github Repo Copy Game Template Clone the repository of game template you selected. Here we will use the Tic Tac Toe as an example: git clone git@github.com:acosgames/tictactoe.git Push to your repository Change the remote url to a new repository. If you want the project to be open source, use the organization repository. If you want to keep it private, create a repository where you want. This example will put it in my-new-game repository in the acosgames organization. git remote set-url origin git@github.com:acosgames/my-new-game Finally, push a mirror copy to your new repository. git push -u origin --mirror Note Note: You must create the game through Developer Zone to have repo created in acosgames organization. Deploy Game When you are ready to deploy the game, visit the Developer Zone , and find your deployment command. Example: npm run deploy -- tictactoe.FBC4864251084B188F1A6E63F70C38D3 This will bundle the Client, Server, and Database (if exists), and upload them to acos.games. Publish Game The game will be immediately available as an experimental version. If you think its ready for production, go to the Developer Zone and click Push to Production .","title":"Getting Started"},{"location":"#acos-a-cup-of-skill","text":"Play or develop your own competitive online web game. You must first become a developer in the acosgames GitHub Organization. Simply go to Developer Zone on Acos to start.","title":"(Acos) A cup of skill"},{"location":"#getting-started","text":"Create a new game inside the Developer Zone on Acos . A public GitHub repository will be created at https://github.com/acosgames/<game_slug> with the Slug Name you specified. You will be added as an admin to the repository.","title":"Getting Started"},{"location":"#start-from-an-existing-game-template","text":"Choose from the available game templates below: Game Templates Tic Tac Toe Play on Acos Github Repo","title":"Start from an existing Game Template"},{"location":"#copy-game-template","text":"Clone the repository of game template you selected. Here we will use the Tic Tac Toe as an example: git clone git@github.com:acosgames/tictactoe.git","title":"Copy Game Template"},{"location":"#push-to-your-repository","text":"Change the remote url to a new repository. If you want the project to be open source, use the organization repository. If you want to keep it private, create a repository where you want. This example will put it in my-new-game repository in the acosgames organization. git remote set-url origin git@github.com:acosgames/my-new-game Finally, push a mirror copy to your new repository. git push -u origin --mirror Note Note: You must create the game through Developer Zone to have repo created in acosgames organization.","title":"Push to your repository"},{"location":"#deploy-game","text":"When you are ready to deploy the game, visit the Developer Zone , and find your deployment command. Example: npm run deploy -- tictactoe.FBC4864251084B188F1A6E63F70C38D3 This will bundle the Client, Server, and Database (if exists), and upload them to acos.games.","title":"Deploy Game"},{"location":"#publish-game","text":"The game will be immediately available as an experimental version. If you think its ready for production, go to the Developer Zone and click Push to Production .","title":"Publish Game"},{"location":"concepts/","text":"Dev Concepts Overview of the concepts that make games work on the Acos platform. Projects Game Client The client is responsible for displaying the game state that is forwarded to your game's front end. There is a helper file called acosg.js that listens for incoming state updates. Everytime there is an update, you will receive the full state. The TicTacToe example uses ReactJS, but any JS framework can be used, as long as you can receive updates and send actions by re-creating what the acosg.js file does. Send Action Client's can send actions in the following format using the acosg.js send function: send ( \"pick\" , 3 ); The first parameter is always a string, second parameter can be any primitive, array, or object type. Game Server The server is responsible for building the game state that is automatically synchronized to all clients. Your server code will be run inside a JS virtual machine, and you will have access to the globals object. //log a message, only available in simulator globals . log ( msg ); //log an error, only available in simulator globals . error ( msg ); //get the array of actions sent by users or system globals . actions (); //get the last gameState object, copy this to a variable and make changes directly to it globals . game (); //get the database JSON globals . database (); //when finished updating, call this to \"commit\" the state globals . finish ( gameState ); //kill the game immediately globals . killGame (); //if you detect a bad action, tell system you want it ignored. globals . ignore ();","title":"Dev Concepts"},{"location":"concepts/#dev-concepts","text":"Overview of the concepts that make games work on the Acos platform.","title":"Dev Concepts"},{"location":"concepts/#projects","text":"","title":"Projects"},{"location":"concepts/#game-client","text":"The client is responsible for displaying the game state that is forwarded to your game's front end. There is a helper file called acosg.js that listens for incoming state updates. Everytime there is an update, you will receive the full state. The TicTacToe example uses ReactJS, but any JS framework can be used, as long as you can receive updates and send actions by re-creating what the acosg.js file does.","title":"Game Client"},{"location":"concepts/#send-action","text":"Client's can send actions in the following format using the acosg.js send function: send ( \"pick\" , 3 ); The first parameter is always a string, second parameter can be any primitive, array, or object type.","title":"Send Action"},{"location":"concepts/#game-server","text":"The server is responsible for building the game state that is automatically synchronized to all clients. Your server code will be run inside a JS virtual machine, and you will have access to the globals object. //log a message, only available in simulator globals . log ( msg ); //log an error, only available in simulator globals . error ( msg ); //get the array of actions sent by users or system globals . actions (); //get the last gameState object, copy this to a variable and make changes directly to it globals . game (); //get the database JSON globals . database (); //when finished updating, call this to \"commit\" the state globals . finish ( gameState ); //kill the game immediately globals . killGame (); //if you detect a bad action, tell system you want it ignored. globals . ignore ();","title":"Game Server"}]}