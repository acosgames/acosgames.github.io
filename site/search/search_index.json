{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"(Acos) A cup of skill Play or develop your own competitive online web game. You must first become a developer in the acosgames GitHub Organization. Simply go to Developer Zone on Acos to start. Getting Started Create a new game inside the Developer Zone on Acos . A public GitHub repository will be created at https://github.com/acosgames/<game_slug> with the Slug Name you specified. You will be added as an admin to the repository. Start from an existing Game Template Choose from the available game templates below: Game Templates Tic Tac Toe Play on Acos Github Repo Copy Game Template Clone the repository of game template you selected. Here we will use the Tic Tac Toe as an example: git clone git@github.com:acosgames/tictactoe.git Push to your repository Change the remote url to a new repository. If you want the project to be open source, use the organization repository. If you want to keep it private, create a repository where you want. This example will put it in my-new-game repository in the acosgames organization. git remote set-url origin git@github.com:acosgames/my-new-game Finally, push a mirror copy to your new repository. git push -u origin --mirror Note Note: You must create the game through Developer Zone to have repo created in acosgames organization. Deploy Game When you are ready to deploy the game, visit the Developer Zone , and find your deployment command. Example: npm run deploy -- tictactoe.FBC4864251084B188F1A6E63F70C38D3 This will bundle the Client, Server, and Database (if exists), and upload them to acos.games. Publish Game The game will be immediately available as an experimental version. If you think its ready for production, go to the Developer Zone and click Push to Production .","title":"Getting Started"},{"location":"#acos-a-cup-of-skill","text":"Play or develop your own competitive online web game. You must first become a developer in the acosgames GitHub Organization. Simply go to Developer Zone on Acos to start.","title":"(Acos) A cup of skill"},{"location":"#getting-started","text":"Create a new game inside the Developer Zone on Acos . A public GitHub repository will be created at https://github.com/acosgames/<game_slug> with the Slug Name you specified. You will be added as an admin to the repository.","title":"Getting Started"},{"location":"#start-from-an-existing-game-template","text":"Choose from the available game templates below: Game Templates Tic Tac Toe Play on Acos Github Repo","title":"Start from an existing Game Template"},{"location":"#copy-game-template","text":"Clone the repository of game template you selected. Here we will use the Tic Tac Toe as an example: git clone git@github.com:acosgames/tictactoe.git","title":"Copy Game Template"},{"location":"#push-to-your-repository","text":"Change the remote url to a new repository. If you want the project to be open source, use the organization repository. If you want to keep it private, create a repository where you want. This example will put it in my-new-game repository in the acosgames organization. git remote set-url origin git@github.com:acosgames/my-new-game Finally, push a mirror copy to your new repository. git push -u origin --mirror Note Note: You must create the game through Developer Zone to have repo created in acosgames organization.","title":"Push to your repository"},{"location":"#deploy-game","text":"When you are ready to deploy the game, visit the Developer Zone , and find your deployment command. Example: npm run deploy -- tictactoe.FBC4864251084B188F1A6E63F70C38D3 This will bundle the Client, Server, and Database (if exists), and upload them to acos.games.","title":"Deploy Game"},{"location":"#publish-game","text":"The game will be immediately available as an experimental version. If you think its ready for production, go to the Developer Zone and click Push to Production .","title":"Publish Game"},{"location":"concepts/","text":"Dev Concepts Overview of the concepts that make games work on the Acos platform. Projects Game Client The client is responsible for displaying the game state that is forwarded to your game's front end. There is a helper file called acosg.js that listens for incoming state updates. Everytime there is an update, you will receive the full state. The TicTacToe example uses ReactJS, but any JS framework can be used, as long as you can receive updates and send actions by re-creating what the acosg.js file does. Send Action Client's can send actions in the following format using the acosg.js send function: send ( \"pick\" , 3 ); The first parameter is always a string, second parameter can be any primitive, array, or object type. Game Server The server is responsible for building the game state that is automatically synchronized to all clients. There is a helper file used on the game-server side also called acosg.js . Its a wrapper to help simplify using the globals listed below. See the index.js and game.js for the usage of the helper file. Your server code will be run inside a JS virtual machine, and you will have access to the globals object. //log a message, only available in simulator globals . log ( msg ); //log an error, only available in simulator globals . error ( msg ); //get the array of actions sent by users or system globals . actions (); //get the last gameState object, copy this to a variable and make changes directly to it globals . game (); //get the database JSON globals . database (); //when finished updating, call this to \"commit\" the state globals . finish ( gameState ); //kill the game immediately globals . killGame (); //if you detect a bad action, tell system you want it ignored. globals . ignore (); Game State Objects The Game State consists of several objects: { \"state\" : {}, \"players\" : {}, \"rules\" : {}, \"events\" : {}, \"timer\" : {}, \"next\" : {} } state This is where you should keep all data that mutates on every action that affects the game board or environment. hidden values Inside the state object, you can create variables with _ underscore to make them private. Example, that hides the deck from sending to clients: { \"state\" : { \"_deck\" : [ \"AS\" , \"AH\" , \"3D\" ] } } gamestatus The gamestatus key is auto-generated by the platform and saved inside the state . The possible values are: pregame starting gamestart gameover Example: { \"state\" : { \"gamestatus\" : \"gamestart\" } } Game status is used internally by the platform with the timer to trigger the next gamestatus. Exception is when gamestatus=\"gamestart\" , the timers will cause a \"skip\" action, for the current player(s) who are next. players When players are added into the game, they are automatically added into the players object. All players have a shortid that references them inside the Acos databse. { \"players\" : { \"ABCDEF\" : { \"name\" : \"JoeFacebook\" , \"rank\" : 2 , \"score\" : 0 , \"ready\" : true }, \"UVWXYZ\" : { \"name\" : \"JoeOfTexas\" , \"rank\" : 2 , \"score\" : 0 , \"ready\" : true } } } ready Your client must trigger an action send('ready', true) when your client front-end is loaded. This is saved into the player's object, and let's the platform know when to trigger a gamestart event. rank & score rank is set by you to determine who is in 1st, 2nd, 3rd, ..., nth place. On gameover, the system will update the player ratings based on this value. score is set by your to determine how many points the users have earned. This has no purpose, unless rank is removed, scores are used to calculate new player ratings. name name is the user's name that was setup when user first logged in. hidden values Inside the players object, you can create variables with _ underscore to make them private. Example that hides the user's cards from sharing with other players: { \"player\" : { \"ABCDEF\" : { \"name\" : \"JoeOfTexas\" , \"rank\" : 1 , \"_cards\" : [ \"2S\" , \"3S\" , \"4S\" , \"5S\" , \"6S\" ] } } } rules Rules are not mandatory, but its a clean way to define the rules of your game. How many rounds, max players, min players. Ideally, these should be static and not change, but you can change between actions if needed. { \"rules\" : { \"maxplayers\" : 2 , \"minplayers\" : 2 , \"rounds\" : 3 } } events Events are used to notify when an actions occur from a user or the Acos platform pregame Triggered when the first player joins the game starting Triggered when all players are ready (client front-ends are all loaded) gamestart Triggered after the starting countdown reaches zero gameover Triggered when the game ends and room is closed custom events You can create your own events by defining any key, here we used pick : { \"events\" : { \"pick\" : { \"user\" : \"ABCDEF\" , \"picked\" : 3 } } } Or you could do even simpler: { \"events\" : { \"pick\" : 3 } } timer The timer helps control the flow of the game. It is important that you always set a timer. Rooms will be destroyed if they do not complete within 1 hour. To set a timer, make sure you commit the game state with this format: { \"timer\" : { \"set\" : 15 } } The example above sets a timer for 15 seconds. The platform will detect the seconds set, and create these values: { \"timer\" : { \"end\" : 1641166075 , \"seconds\" : 15 } } On the client-side, end can be used to calculate timeleft. next The next object is used to tell the system who is allowed to send an action. { \"next\" : { \"id\" : \"*\" } } The only required key is the id key. The values can be either * or player's shortid, i.e. ABCDEF","title":"Dev Concepts"},{"location":"concepts/#dev-concepts","text":"Overview of the concepts that make games work on the Acos platform.","title":"Dev Concepts"},{"location":"concepts/#projects","text":"","title":"Projects"},{"location":"concepts/#game-client","text":"The client is responsible for displaying the game state that is forwarded to your game's front end. There is a helper file called acosg.js that listens for incoming state updates. Everytime there is an update, you will receive the full state. The TicTacToe example uses ReactJS, but any JS framework can be used, as long as you can receive updates and send actions by re-creating what the acosg.js file does.","title":"Game Client"},{"location":"concepts/#send-action","text":"Client's can send actions in the following format using the acosg.js send function: send ( \"pick\" , 3 ); The first parameter is always a string, second parameter can be any primitive, array, or object type.","title":"Send Action"},{"location":"concepts/#game-server","text":"The server is responsible for building the game state that is automatically synchronized to all clients. There is a helper file used on the game-server side also called acosg.js . Its a wrapper to help simplify using the globals listed below. See the index.js and game.js for the usage of the helper file. Your server code will be run inside a JS virtual machine, and you will have access to the globals object. //log a message, only available in simulator globals . log ( msg ); //log an error, only available in simulator globals . error ( msg ); //get the array of actions sent by users or system globals . actions (); //get the last gameState object, copy this to a variable and make changes directly to it globals . game (); //get the database JSON globals . database (); //when finished updating, call this to \"commit\" the state globals . finish ( gameState ); //kill the game immediately globals . killGame (); //if you detect a bad action, tell system you want it ignored. globals . ignore ();","title":"Game Server"},{"location":"concepts/#game-state-objects","text":"The Game State consists of several objects: { \"state\" : {}, \"players\" : {}, \"rules\" : {}, \"events\" : {}, \"timer\" : {}, \"next\" : {} }","title":"Game State Objects"},{"location":"concepts/#state","text":"This is where you should keep all data that mutates on every action that affects the game board or environment.","title":"state"},{"location":"concepts/#hidden-values","text":"Inside the state object, you can create variables with _ underscore to make them private. Example, that hides the deck from sending to clients: { \"state\" : { \"_deck\" : [ \"AS\" , \"AH\" , \"3D\" ] } }","title":"hidden values"},{"location":"concepts/#gamestatus","text":"The gamestatus key is auto-generated by the platform and saved inside the state . The possible values are: pregame starting gamestart gameover Example: { \"state\" : { \"gamestatus\" : \"gamestart\" } } Game status is used internally by the platform with the timer to trigger the next gamestatus. Exception is when gamestatus=\"gamestart\" , the timers will cause a \"skip\" action, for the current player(s) who are next.","title":"gamestatus"},{"location":"concepts/#players","text":"When players are added into the game, they are automatically added into the players object. All players have a shortid that references them inside the Acos databse. { \"players\" : { \"ABCDEF\" : { \"name\" : \"JoeFacebook\" , \"rank\" : 2 , \"score\" : 0 , \"ready\" : true }, \"UVWXYZ\" : { \"name\" : \"JoeOfTexas\" , \"rank\" : 2 , \"score\" : 0 , \"ready\" : true } } }","title":"players"},{"location":"concepts/#ready","text":"Your client must trigger an action send('ready', true) when your client front-end is loaded. This is saved into the player's object, and let's the platform know when to trigger a gamestart event.","title":"ready"},{"location":"concepts/#rank-score","text":"rank is set by you to determine who is in 1st, 2nd, 3rd, ..., nth place. On gameover, the system will update the player ratings based on this value. score is set by your to determine how many points the users have earned. This has no purpose, unless rank is removed, scores are used to calculate new player ratings.","title":"rank &amp; score"},{"location":"concepts/#name","text":"name is the user's name that was setup when user first logged in.","title":"name"},{"location":"concepts/#hidden-values_1","text":"Inside the players object, you can create variables with _ underscore to make them private. Example that hides the user's cards from sharing with other players: { \"player\" : { \"ABCDEF\" : { \"name\" : \"JoeOfTexas\" , \"rank\" : 1 , \"_cards\" : [ \"2S\" , \"3S\" , \"4S\" , \"5S\" , \"6S\" ] } } }","title":"hidden values"},{"location":"concepts/#rules","text":"Rules are not mandatory, but its a clean way to define the rules of your game. How many rounds, max players, min players. Ideally, these should be static and not change, but you can change between actions if needed. { \"rules\" : { \"maxplayers\" : 2 , \"minplayers\" : 2 , \"rounds\" : 3 } }","title":"rules"},{"location":"concepts/#events","text":"Events are used to notify when an actions occur from a user or the Acos platform pregame Triggered when the first player joins the game starting Triggered when all players are ready (client front-ends are all loaded) gamestart Triggered after the starting countdown reaches zero gameover Triggered when the game ends and room is closed custom events You can create your own events by defining any key, here we used pick : { \"events\" : { \"pick\" : { \"user\" : \"ABCDEF\" , \"picked\" : 3 } } } Or you could do even simpler: { \"events\" : { \"pick\" : 3 } }","title":"events"},{"location":"concepts/#timer","text":"The timer helps control the flow of the game. It is important that you always set a timer. Rooms will be destroyed if they do not complete within 1 hour. To set a timer, make sure you commit the game state with this format: { \"timer\" : { \"set\" : 15 } } The example above sets a timer for 15 seconds. The platform will detect the seconds set, and create these values: { \"timer\" : { \"end\" : 1641166075 , \"seconds\" : 15 } } On the client-side, end can be used to calculate timeleft.","title":"timer"},{"location":"concepts/#next","text":"The next object is used to tell the system who is allowed to send an action. { \"next\" : { \"id\" : \"*\" } } The only required key is the id key. The values can be either * or player's shortid, i.e. ABCDEF","title":"next"}]}